图元、纹理
Window上开发环境的建立
WinMain函数
注册窗口类的作用
创建窗口函数学习（CreateWindow）
Windows消息回调的使用
实现基本的消息循环

注册窗口类
创建窗口

显示更新窗口
消息循环

wndProc回调函数

win32的应用程序和操作系统之间是进行消息队列的处理
带有UI的程序才会有这个队列
接受键盘鼠标网络的事件

OpenGL glBegin 和 glEnd 是1.0 的方法，高版本已经抛弃了，非常消耗性能，每掉一次函数，都会有开销，压栈入栈，传递数据，动态分配内存


基本图元编辑
1、正交投影
对投影的理解
	在当前的窗口上建立一个新的坐标系，所有的绘制数据都建立在这个新的坐标系下，定义了如何将数据显示到窗口上的一个过程

好处：灵活；支持业务需要；
坏处：增加了额外的坐标转换计算

OpenGL里正交投影的函数：
void glOrtho(
	GLdouble left,
	GLdouble right,
	GLdouble bottom,
	GLdouble top,
	GLdouble zNear,
	GLdouble zFar,
	);

//垂直同步：绘制的刷新率和屏幕的刷新率是一致的

透视投影的OpenGL函数
void gluPerspective(
GLdouble fovy,//角度
GLdouble aspect,//宽高比
GLdouble zNear,//近裁剪面
GLdouble zFar//远裁剪面
);

基于OpenGL ES的压缩纹理有常见的如下几种实现：
1.ETC1(Ericsson texture compression)
2.PVRTC(PowerVR texture compression)
3.ATITC(ATI texture compression)
4.S3TC(S3 texture compression)
ETC1:
ETC1格式是OpenGL ES图形标准的一部分，并且被所有的Android设备所支持
扩展名为：GL_OES_compressed_ETC1_RGB8_texture，不支持透明通道，所以仅能用于不透明纹理
当加载压缩纹理时，参数支持如下格式：
GL_ETC1_RGB8_OES(RGB,每个像素0.5个字节)

PowerVR://苹果手机上用的图形芯片都是PowerVR提供的，性能强悍
支持的GPU为Imagination Technologies的PowerVR SGX系列。
OpenGL ES的扩展名为: GL_IMG_texture_compression_pvrtc。
当加载压缩纹理时，参数支持如下几种格式：
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG (RGB，每个像素0.5个字节)
GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG (RGB，每个像素0.25个字节)
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG (RGBA，每个像素0.5个字节)
GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG (RGBA，每个像素0.25个字节)

ATITC://高通
支持的GPU为Qualcomm的Adreno系列。
支持的OpenGL ES扩展名为: GL_ATI_texture_compression_atitc。
当加载压缩纹理时，参数支持如下类型的纹理：
GL_ATC_RGB_AMD (RGB，每个像素0.5个字节)
GL_ATC_RGBA_EXPLICIT_ALPHA_AMD (RGBA，每个像素1个字节)
GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD (RGBA，每个像素1个字节)
S3TC:
也被称为DXTC，在PC上广泛被使用，但是在移动设备上还是属于新鲜事物。支持的GPU为NVIDIA Tegra系列。
OpenGL ES扩展名为:
GL_EXT_texture_compression_dxt1和GL_EXT_texture_compression_s3tc。
当加载压缩纹理时，的参数有如下几种格式：
GL_COMPRESSED_RGB_S3TC_DXT1 (RGB，每个像素0.5个字节)
GL_COMPRESSED_RGBA_S3TC_DXT1 (RGBA，每个像素0.5个字节)
GL_COMPRESSED_RGBA_S3TC_DXT3 (RGBA，每个像素1个字节)
GL_COMPRESSED_RGBA_S3TC_DXT5 (RGBA，每个像素1个字节)


纹理格式的查询

获取GPU支持哪些压缩纹理string extensions = (const char*)glGetString(GL_EXTENSIONS);a. 判断是否支持ETC1格式的压缩纹理

return 
(extensions.find("GL_OES_compressed_ETC1_RGB8_texture")!= string::npos);

b. 判断是否支持DXT格式的压缩纹理

return 
(extensions.find("GL_EXT_texture_compression_dxt1")!= string::npos ||
extensions.find("GL_EXT_texture_compression_s3tc")!= string::npos);c. 判断是否支持PVRTC格式的压缩纹理

return 
(extensions.find("GL_IMG_texture_compression_pvrtc")!= string::npos);

d. 判断是否支持ATITC格式的压缩纹理return 
(extensions.find("GL_AMD_compressed_ATC_texture")!= string::npos ||
extensions.find("GL_ATI_texture_compression_atitc")!= string::npos);

OpenGL显存优化
显示列表
帧缓存
帧缓存对象
顶点数组
索引数组
像素缓存对象
离屏渲染

三维基础-坐标变换
世界坐标：
	描述整个世界，中心点在0,0,0位置上，无限大，没有单位。且始终不变。
局部坐标：
	模型本身由很多个三维点组成，这些点的位置是先对模型能够自己。
观察矩阵
	就是我们常说的照相机（人的眼睛），照相机在什么位置上看世界。

坐标变换-投影变换
投影变换的目的是确定3D空间的物体如何投影到2D平面上，从而形成2D图像，这些2D图像再经过视口变换就被渲染到屏幕上。
OpenGL是通过外部传入观察矩阵来实现的

模型相关
3DS:3D Studio 是Autodesk公司自定义的中间文本格式
ASE:ASCII 和上面的一样，不过它是明文文本，上面是二进制

顶点可以复用的，但是纹理坐标有一些可以复用，有一些是不能复用的
obj文件
f 顶点索引/纹理索引/法线索引
assimp

ASE:
GEOMOBJECT几何对象
	NODE_TM 节点
	MESH 网格
OpenGL只支持绘制纹理，并不支持绘制文字，常规的做法是把文字变成纹理

地形分为两种：
一种是用三维软件制作，以三维模型的数据导入到我们的场景中
另一种是我们通过一张高度图来生成地形

地形其实就是一堆网格

判断鼠标点下的位置和地形相交的点的位置的主要方法：
1、将地形分成多个小的区域，然后对每一个三角网格进行判断
2、从摄像机的x,z位置出发，沿着从摄像机到鼠标点下位置的x,z方向，求出这条路线上所有地形网格顶点的Y值，如果Y值和我们那条射线上的Y值相等或者差距很小，就认为这个时候的x,z是我们要去的位置